<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ระบบจัดการเมนูอาหาร</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            color: #374151;
            padding: 1rem;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 1.5rem;
            background-color: #ffffff;
            border-radius: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .input-group label {
            font-weight: 600;
            color: #1f2937;
        }
        .input-group input, .input-group textarea, .input-group select {
            border: 1px solid #d1d5db;
            padding: 0.75rem;
            border-radius: 0.75rem;
            width: 100%;
            margin-top: 0.25rem;
            transition: border-color 0.3s;
        }
        .input-group input:focus, .input-group textarea:focus {
            outline: none;
            border-color: #2563eb;
        }
        .btn {
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            border-radius: 0.75rem;
            transition: background-color 0.3s, transform 0.1s;
        }
        .btn-primary {
            background-color: #2563eb;
            color: #ffffff;
        }
        .btn-primary:hover {
            background-color: #1d4ed8;
            transform: translateY(-1px);
        }
        .btn-danger {
            background-color: #ef4444;
            color: #ffffff;
        }
        .btn-danger:hover {
            background-color: #dc2626;
            transform: translateY(-1px);
        }
        .card {
            background-color: #f9fafb;
            border-radius: 1rem;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s;
        }
        .card:hover {
            transform: translateY(-2px);
        }
        .card-image {
            width: 100%;
            height: 150px;
            object-fit: cover;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
        }
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #2563eb;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>

<div id="app" class="container">
    <div id="loading" class="loading-overlay hidden">
        <div class="spinner"></div>
    </div>
    <div id="content" class="fade-in">
        <h1 class="text-3xl font-bold text-center mb-6 text-gray-900">ระบบจัดการร้านอาหาร</h1>

        <div class="mb-8 p-6 bg-gray-50 rounded-2xl">
            <h2 class="text-xl font-semibold mb-4">ข้อมูลร้านค้า</h2>
            <div class="mb-4">
                <label for="restaurant-name-input" class="block text-sm mb-1">ชื่อร้านอาหาร</label>
                <input type="text" id="restaurant-name-input" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500" placeholder="ใส่ชื่อร้านของคุณที่นี่" maxlength="50">
            </div>
            <p class="text-sm text-gray-500">รหัสผู้ใช้งาน: <span id="user-id-display" class="font-mono text-gray-700 break-all">กำลังโหลด...</span></p>
        </div>

        <div class="mb-8 p-6 bg-gray-50 rounded-2xl">
            <h2 class="text-xl font-semibold mb-4">เพิ่ม/แก้ไขเมนูอาหาร</h2>
            <form id="menu-form" class="space-y-4">
                <input type="hidden" id="menu-item-id">
                <div>
                    <label for="item-name" class="block text-sm mb-1">ชื่อเมนู</label>
                    <input type="text" id="item-name" class="w-full px-4 py-2 border border-gray-300 rounded-lg" required>
                </div>
                <div>
                    <label for="item-price" class="block text-sm mb-1">ราคา</label>
                    <input type="number" id="item-price" class="w-full px-4 py-2 border border-gray-300 rounded-lg" required min="0">
                </div>
                <div>
                    <label for="item-description" class="block text-sm mb-1">รายละเอียด (ไม่บังคับ)</label>
                    <textarea id="item-description" rows="3" class="w-full px-4 py-2 border border-gray-300 rounded-lg"></textarea>
                </div>
                <div class="space-y-2">
                    <label for="image-input-type" class="block text-sm mb-1">รูปภาพ</label>
                    <div class="flex items-center space-x-4">
                        <input type="radio" id="url-option" name="image-input-type" value="url" checked>
                        <label for="url-option" class="text-sm">ใช้ URL รูปภาพ</label>
                        <input type="radio" id="upload-option" name="image-input-type" value="upload">
                        <label for="upload-option" class="text-sm">อัปโหลดไฟล์ (จำลอง)</label>
                    </div>
                    <input type="text" id="image-url" class="w-full px-4 py-2 border border-gray-300 rounded-lg" placeholder="วาง URL รูปภาพที่นี่">
                    <input type="file" id="image-file" class="w-full hidden px-4 py-2 border border-gray-300 rounded-lg" accept="image/*">
                </div>
                <button type="submit" id="submit-btn" class="w-full btn btn-primary">เพิ่มเมนู</button>
            </form>
        </div>

        <div class="p-6 bg-gray-50 rounded-2xl">
            <h2 class="text-xl font-semibold mb-4">เมนูทั้งหมด</h2>
            <div id="menu-list" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
                <!-- Menu items will be rendered here -->
            </div>
            <p id="no-menu-message" class="text-center text-gray-500 mt-4 hidden">ยังไม่มีเมนูอาหาร</p>
        </div>
    </div>
</div>

<script type="module">
    // Import Firebase libraries from CDN
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, doc, getDoc, setDoc, onSnapshot, collection, addDoc, updateDoc, deleteDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
    import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    // IMPORTANT: Firebase and App ID variables are provided by the environment
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

    setLogLevel('debug'); // Enable debug logging for Firestore

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth(app);

    // DOM elements
    const userIdDisplay = document.getElementById('user-id-display');
    const loadingOverlay = document.getElementById('loading');
    const restaurantNameInput = document.getElementById('restaurant-name-input');
    const menuForm = document.getElementById('menu-form');
    const itemIdInput = document.getElementById('menu-item-id');
    const itemNameInput = document.getElementById('item-name');
    const itemPriceInput = document.getElementById('item-price');
    const itemDescriptionInput = document.getElementById('item-description');
    const menuListDiv = document.getElementById('menu-list');
    const noMenuMessage = document.getElementById('no-menu-message');
    const submitBtn = document.getElementById('submit-btn');
    const imageInputTypeRadios = document.getElementsByName('image-input-type');
    const imageUrlInput = document.getElementById('image-url');
    const imageFileInput = document.getElementById('image-file');
    const contentDiv = document.getElementById('content');

    let userId = null;
    let isEditing = false;
    let unsubscribeRestaurantName = null;
    let unsubscribeMenuItems = null;
    let authReady = false;

    // Show loading spinner
    function showLoading() {
        loadingOverlay.classList.remove('hidden');
        contentDiv.classList.add('hidden');
    }

    // Hide loading spinner
    function hideLoading() {
        loadingOverlay.classList.add('hidden');
        contentDiv.classList.remove('hidden');
    }

    // Main initialization function
    window.onload = async function() {
        showLoading();
        // Listen for authentication state changes
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                userId = user.uid;
                userIdDisplay.textContent = userId;
                authReady = true;

                // Set up real-time listeners for restaurant data
                setupRealtimeListeners();

                hideLoading();
            } else {
                try {
                    // Sign in with custom token or anonymously if not available
                    if (initialAuthToken) {
                        await signInWithCustomToken(auth, initialAuthToken);
                    } else {
                        await signInAnonymously(auth);
                    }
                } catch (error) {
                    console.error("Authentication failed: ", error);
                    alert("การยืนยันตัวตนล้มเหลว โปรดลองใหม่อีกครั้ง");
                    hideLoading();
                }
            }
        });
    }

    // Setup real-time listeners for Firestore data
    function setupRealtimeListeners() {
        if (!userId) {
            console.error("User ID is not set. Cannot set up listeners.");
            return;
        }
        
        // Listener for restaurant name
        const restaurantNameDocRef = doc(db, 'artifacts', appId, 'users', userId, 'restaurantData', 'details');
        unsubscribeRestaurantName = onSnapshot(restaurantNameDocRef, (docSnap) => {
            if (docSnap.exists() && docSnap.data().name) {
                restaurantNameInput.value = docSnap.data().name;
                document.title = docSnap.data().name + ' - ระบบจัดการเมนูอาหาร';
            } else {
                restaurantNameInput.value = '';
                document.title = 'ระบบจัดการเมนูอาหาร';
            }
        }, (error) => {
            console.error("Error fetching restaurant name: ", error);
        });

        // Listener for menu items
        const menuItemsCollectionRef = collection(db, 'artifacts', appId, 'users', userId, 'restaurantData', 'details', 'menuItems');
        unsubscribeMenuItems = onSnapshot(menuItemsCollectionRef, (querySnapshot) => {
            const menuItems = [];
            querySnapshot.forEach((doc) => {
                menuItems.push({ id: doc.id, ...doc.data() });
            });
            renderMenuItems(menuItems);
        }, (error) => {
            console.error("Error fetching menu items: ", error);
        });
    }

    // Handle form submission (add/edit menu item)
    menuForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (!userId) {
            console.error("User not authenticated. Cannot submit form.");
            return;
        }

        const name = itemNameInput.value.trim();
        const price = parseFloat(itemPriceInput.value);
        const description = itemDescriptionInput.value.trim();
        const imageType = document.querySelector('input[name="image-input-type"]:checked').value;
        let image = '';

        try {
            if (imageType === 'url') {
                image = imageUrlInput.value.trim();
            } else if (imageType === 'upload') {
                const file = imageFileInput.files[0];
                if (file) {
                    image = await fileToBase64(file);
                }
            }
        } catch (error) {
            console.error("Error handling image:", error);
            // Non-blocking error for image handling
        }

        const itemData = { name, price, description, image, createdAt: new Date() };

        try {
            if (isEditing) {
                const docRef = doc(db, 'artifacts', appId, 'users', userId, 'restaurantData', 'details', 'menuItems', itemIdInput.value);
                await updateDoc(docRef, itemData);
                console.log("Menu item updated successfully!");
                showUserMessage("เมนูอาหารถูกแก้ไขแล้ว");
                isEditing = false;
                submitBtn.textContent = 'เพิ่มเมนู';
            } else {
                const collectionRef = collection(db, 'artifacts', appId, 'users', userId, 'restaurantData', 'details', 'menuItems');
                await addDoc(collectionRef, itemData);
                console.log("Menu item added successfully!");
                showUserMessage("เมนูอาหารถูกเพิ่มแล้ว");
            }
            menuForm.reset();
            itemIdInput.value = '';
        } catch (error) {
            console.error("Error adding/updating document: ", error);
            showUserMessage("เกิดข้อผิดพลาดในการบันทึกข้อมูล");
        }
    });

    // Handle restaurant name input
    restaurantNameInput.addEventListener('input', async () => {
        if (!userId) return;
        const name = restaurantNameInput.value.trim();
        const restaurantNameDocRef = doc(db, 'artifacts', appId, 'users', userId, 'restaurantData', 'details');
        try {
            await setDoc(restaurantNameDocRef, { name }, { merge: true });
        } catch (error) {
            console.error("Error setting restaurant name: ", error);
        }
    });

    // Handle image input type switch
    imageInputTypeRadios.forEach(radio => {
        radio.addEventListener('change', () => {
            if (radio.value === 'url') {
                imageUrlInput.classList.remove('hidden');
                imageFileInput.classList.add('hidden');
                imageUrlInput.required = true;
                imageFileInput.required = false;
            } else {
                imageUrlInput.classList.add('hidden');
                imageFileInput.classList.remove('hidden');
                imageUrlInput.required = false;
                imageFileInput.required = true;
            }
        });
    });

    // Render menu items to the UI
    function renderMenuItems(items) {
        menuListDiv.innerHTML = ''; // Clear previous items
        if (items.length === 0) {
            noMenuMessage.classList.remove('hidden');
        } else {
            noMenuMessage.classList.add('hidden');
            // Sort by createdAt to show newest first
            items.sort((a, b) => b.createdAt?.toDate() - a.createdAt?.toDate());
            items.forEach(item => {
                const itemHtml = `
                    <div class="card p-4">
                        <img src="${item.image || 'https://placehold.co/400x300/e5e7eb/6b7280?text=Food'}" alt="${item.name}" class="card-image rounded-lg mb-4" onerror="this.onerror=null;this.src='https://placehold.co/400x300/e5e7eb/6b7280?text=Image+Not+Found';">
                        <h3 class="font-semibold text-lg text-gray-800 mb-1">${item.name}</h3>
                        <p class="text-gray-600 text-sm mb-2">${item.description || ''}</p>
                        <p class="text-xl font-bold text-gray-900 mb-4">${item.price.toFixed(2)} บาท</p>
                        <div class="flex space-x-2">
                            <button class="btn btn-primary flex-1 edit-btn" data-id="${item.id}">แก้ไข</button>
                            <button class="btn btn-danger flex-1 delete-btn" data-id="${item.id}">ลบ</button>
                        </div>
                    </div>
                `;
                menuListDiv.innerHTML += itemHtml;
            });

            // Attach event listeners to new buttons
            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', () => editMenuItem(btn.dataset.id, items));
            });
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', () => deleteMenuItem(btn.dataset.id));
            });
        }
    }

    // Function to edit a menu item
    function editMenuItem(itemId, items) {
        const itemToEdit = items.find(item => item.id === itemId);
        if (itemToEdit) {
            itemIdInput.value = itemToEdit.id;
            itemNameInput.value = itemToEdit.name;
            itemPriceInput.value = itemToEdit.price;
            itemDescriptionInput.value = itemToEdit.description;

            // Set the correct image input type based on the stored image data
            if (itemToEdit.image && (itemToEdit.image.startsWith('http') || itemToEdit.image.startsWith('https'))) {
                document.getElementById('url-option').checked = true;
                imageUrlInput.value = itemToEdit.image;
                imageUrlInput.classList.remove('hidden');
                imageFileInput.classList.add('hidden');
                imageUrlInput.required = true;
                imageFileInput.required = false;
            } else {
                document.getElementById('upload-option').checked = true;
                imageFileInput.classList.remove('hidden');
                imageUrlInput.classList.add('hidden');
                imageFileInput.required = true;
                imageUrlInput.required = false;
                // Cannot pre-fill file input for security reasons
                imageUrlInput.value = '';
            }

            isEditing = true;
            submitBtn.textContent = 'บันทึกการแก้ไข';
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
    }

    // Function to delete a menu item
    async function deleteMenuItem(itemId) {
        // Use a custom confirmation modal instead of alert/confirm
        const modal = createModal('ยืนยันการลบ', 'คุณแน่ใจหรือไม่ที่จะลบเมนูนี้?', async () => {
            try {
                const docRef = doc(db, 'artifacts', appId, 'users', userId, 'restaurantData', 'details', 'menuItems', itemId);
                await deleteDoc(docRef);
                showUserMessage("เมนูอาหารถูกลบแล้ว");
            } catch (error) {
                console.error("Error deleting document: ", error);
                showUserMessage("เกิดข้อผิดพลาดในการลบข้อมูล");
            } finally {
                modal.remove();
            }
        });
        document.body.appendChild(modal);
    }

    // Utility function to convert file to Base64
    function fileToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
        });
    }
    
    // Function to show a user message using a modal
    function showUserMessage(message) {
        const modal = createModal('ข้อความ', message, null, false);
        document.body.appendChild(modal);
    }

    // Function to create a generic modal dialog
    function createModal(title, message, onConfirm, showCancel = true) {
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center';
        modal.innerHTML = `
            <div class="relative p-8 bg-white w-96 max-w-lg mx-auto rounded-xl shadow-lg">
                <div class="text-center">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">${title}</h3>
                    <div class="mt-2">
                        <p class="text-sm text-gray-500">${message}</p>
                    </div>
                    <div class="mt-4 flex justify-center space-x-3">
                        ${showCancel ? `<button id="cancel-btn" class="btn bg-gray-200 text-gray-700 hover:bg-gray-300">ยกเลิก</button>` : ''}
                        <button id="confirm-btn" class="btn btn-primary">${showCancel ? 'ยืนยัน' : 'ตกลง'}</button>
                    </div>
                </div>
            </div>
        `;
        
        const confirmBtn = modal.querySelector('#confirm-btn');
        const cancelBtn = modal.querySelector('#cancel-btn');

        if (confirmBtn) {
            confirmBtn.onclick = () => {
                if (onConfirm) onConfirm();
                modal.remove();
            };
        }
        if (cancelBtn) {
            cancelBtn.onclick = () => modal.remove();
        }

        return modal;
    }
</script>
</body>
</html>

