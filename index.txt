<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ระบบสั่งอาหารร้านค้า</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, query, where, getDocs } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables provided by the canvas environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : '';
        
        // Initialize Firebase
        let app, db, auth;
        let isAuthReady = false;

        window.onload = async () => {
            try {
                if (Object.keys(firebaseConfig).length > 0) {
                    app = initializeApp(firebaseConfig);
                    db = getFirestore(app);
                    auth = getAuth(app);
                    
                    if (initialAuthToken) {
                        await signInWithCustomToken(auth, initialAuthToken);
                    } else {
                        await signInAnonymously(auth);
                    }
                }
            } catch (error) {
                console.error("Firebase initialization failed:", error);
            }
        };

        // Firebase Auth State Listener
        onAuthStateChanged(auth, (user) => {
            if (user) {
                console.log("User signed in:", user.uid);
                isAuthReady = true;
                initApp();
            } else {
                console.log("User signed out.");
                isAuthReady = false;
            }
        });

        // Application logic
        function initApp() {
            const userId = auth.currentUser.uid;
            const menuCollectionPath = `/artifacts/${appId}/users/${userId}/menu_items`;
            
            const adminMenuForm = document.getElementById('adminMenuForm');
            const adminMenuName = document.getElementById('adminMenuName');
            const adminMenuPrice = document.getElementById('adminMenuPrice');
            const adminMenuItemId = document.getElementById('adminMenuItemId');
            const adminMenuList = document.getElementById('adminMenuList');
            const customerMenuList = document.getElementById('customerMenuList');
            const customerOrderList = document.getElementById('customerOrderList');
            const customerOrderTotal = document.getElementById('customerOrderTotal');
            const orderModal = document.getElementById('orderModal');
            const orderModalContent = document.getElementById('orderModalContent');
            const closeModal = document.getElementById('closeModal');
            
            let currentOrder = {};
            let totalOrderPrice = 0;

            // --- Admin section logic ---
            adminMenuForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const name = adminMenuName.value.trim();
                const price = parseFloat(adminMenuPrice.value);
                const itemId = adminMenuItemId.value;

                if (!name || isNaN(price)) {
                    alert('โปรดกรอกชื่อเมนูและราคาให้ถูกต้อง');
                    return;
                }

                try {
                    if (itemId) {
                        // Update existing item
                        const itemDocRef = doc(db, menuCollectionPath, itemId);
                        await updateDoc(itemDocRef, { name, price });
                        showMessage('เมนูอัปเดตเรียบร้อย!', 'green');
                    } else {
                        // Add new item
                        await addDoc(collection(db, menuCollectionPath), { name, price });
                        showMessage('เพิ่มเมนูเรียบร้อย!', 'green');
                    }
                    adminMenuForm.reset();
                    adminMenuItemId.value = '';
                } catch (e) {
                    console.error("Error adding/updating document: ", e);
                    showMessage('เกิดข้อผิดพลาดในการบันทึกเมนู', 'red');
                }
            });

            const renderAdminMenu = (items) => {
                adminMenuList.innerHTML = '';
                if (items.length === 0) {
                    adminMenuList.innerHTML = '<p class="text-center text-gray-500">ยังไม่มีเมนู</p>';
                } else {
                    items.forEach(item => {
                        const li = document.createElement('li');
                        li.className = 'flex items-center justify-between p-3 bg-white rounded-lg shadow-sm mb-2';
                        li.innerHTML = `
                            <div class="flex-1">
                                <span class="font-bold text-lg">${item.name}</span>
                                <p class="text-gray-600">${item.price.toFixed(2)} บาท</p>
                            </div>
                            <div class="space-x-2">
                                <button class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-1 px-3 rounded-full text-xs edit-btn">แก้ไข</button>
                                <button class="bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded-full text-xs delete-btn">ลบ</button>
                            </div>
                        `;
                        li.querySelector('.edit-btn').addEventListener('click', () => {
                            adminMenuName.value = item.name;
                            adminMenuPrice.value = item.price;
                            adminMenuItemId.value = item.id;
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                        });
                        li.querySelector('.delete-btn').addEventListener('click', async () => {
                            if (confirm(`คุณต้องการลบเมนู "${item.name}"?`)) {
                                try {
                                    await deleteDoc(doc(db, menuCollectionPath, item.id));
                                    showMessage('เมนูถูกลบเรียบร้อย!', 'green');
                                } catch (e) {
                                    console.error("Error deleting document: ", e);
                                    showMessage('เกิดข้อผิดพลาดในการลบเมนู', 'red');
                                }
                            }
                        });
                        adminMenuList.appendChild(li);
                    });
                }
            };
            
            // --- Customer section logic ---
            const renderCustomerMenu = (items) => {
                customerMenuList.innerHTML = '';
                if (items.length === 0) {
                    customerMenuList.innerHTML = '<p class="text-center text-gray-500">ร้านค้ายังไม่มีเมนู</p>';
                } else {
                    items.forEach(item => {
                        const div = document.createElement('div');
                        div.className = 'bg-white p-4 rounded-lg shadow-md flex items-center justify-between mb-4';
                        div.innerHTML = `
                            <div>
                                <h3 class="font-bold text-xl">${item.name}</h3>
                                <p class="text-gray-600 text-lg">${item.price.toFixed(2)} บาท</p>
                            </div>
                            <button class="bg-indigo-500 hover:bg-indigo-600 text-white font-bold py-2 px-4 rounded-full add-to-cart-btn" data-id="${item.id}" data-name="${item.name}" data-price="${item.price}">เพิ่ม</button>
                        `;
                        customerMenuList.appendChild(div);
                    });
                }
            };
            
            customerMenuList.addEventListener('click', (e) => {
                if (e.target.classList.contains('add-to-cart-btn')) {
                    const id = e.target.dataset.id;
                    const name = e.target.dataset.name;
                    const price = parseFloat(e.target.dataset.price);

                    if (currentOrder[id]) {
                        currentOrder[id].quantity += 1;
                    } else {
                        currentOrder[id] = { name, price, quantity: 1 };
                    }
                    updateOrderList();
                    showMessage(`เพิ่ม ${name} ในรายการ`, 'blue');
                }
            });
            
            const updateOrderList = () => {
                customerOrderList.innerHTML = '';
                totalOrderPrice = 0;
                
                if (Object.keys(currentOrder).length === 0) {
                    customerOrderList.innerHTML = '<p class="text-center text-gray-500">ไม่มีรายการอาหารในตะกร้า</p>';
                } else {
                    for (const id in currentOrder) {
                        const item = currentOrder[id];
                        const itemTotal = item.price * item.quantity;
                        totalOrderPrice += itemTotal;

                        const li = document.createElement('li');
                        li.className = 'flex justify-between items-center py-2 border-b last:border-b-0';
                        li.innerHTML = `
                            <span class="flex-1">${item.name} x ${item.quantity}</span>
                            <div class="flex items-center space-x-2">
                                <span class="text-gray-700">${itemTotal.toFixed(2)} บาท</span>
                                <button class="text-red-500 hover:text-red-700 font-bold text-xs remove-btn" data-id="${id}">ลบ</button>
                            </div>
                        `;
                        customerOrderList.appendChild(li);
                    }
                }
                customerOrderTotal.textContent = `ราคารวม: ${totalOrderPrice.toFixed(2)} บาท`;
            };
            
            customerOrderList.addEventListener('click', (e) => {
                if (e.target.classList.contains('remove-btn')) {
                    const id = e.target.dataset.id;
                    const name = currentOrder[id].name;
                    delete currentOrder[id];
                    updateOrderList();
                    showMessage(`ลบ ${name} ออกจากรายการ`, 'red');
                }
            });
            
            document.getElementById('checkoutBtn').addEventListener('click', () => {
                if (Object.keys(currentOrder).length === 0) {
                    alert('โปรดเลือกเมนูอาหารก่อน');
                    return;
                }
                
                const orderSummary = Object.values(currentOrder).map(item => `${item.name} x ${item.quantity}`).join('<br>');
                orderModalContent.innerHTML = `
                    <h2 class="text-2xl font-bold mb-4">สรุปรายการสั่งซื้อ</h2>
                    <p class="text-gray-700 mb-2">${orderSummary}</p>
                    <p class="text-xl font-bold text-right mt-4">รวม: ${totalOrderPrice.toFixed(2)} บาท</p>
                    <button class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-full mt-4">ยืนยันการสั่งซื้อ</button>
                `;
                orderModal.classList.remove('hidden');
            });

            closeModal.addEventListener('click', () => {
                orderModal.classList.add('hidden');
            });
            
            // Real-time data listener for menu items
            if (db && isAuthReady) {
                const q = collection(db, menuCollectionPath);
                onSnapshot(q, (snapshot) => {
                    const menuItems = [];
                    snapshot.forEach((doc) => {
                        menuItems.push({ id: doc.id, ...doc.data() });
                    });
                    renderAdminMenu(menuItems);
                    renderCustomerMenu(menuItems);
                }, (error) => {
                    console.error("Error fetching menu items:", error);
                    showMessage('ไม่สามารถดึงข้อมูลเมนูได้', 'red');
                });
            }

            // Simple message box function
            function showMessage(message, color) {
                const messageBox = document.getElementById('messageBox');
                messageBox.textContent = message;
                messageBox.className = `p-3 rounded-lg text-white font-bold text-center fixed bottom-4 right-4 z-50 transition-transform transform translate-y-0 opacity-100 ${color === 'green' ? 'bg-green-500' : color === 'red' ? 'bg-red-500' : 'bg-blue-500'}`;
                setTimeout(() => {
                    messageBox.classList.remove('translate-y-0');
                    messageBox.classList.add('translate-y-20');
                    messageBox.classList.add('opacity-0');
                }, 3000);
            }
        }
    </script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: 1000px;
            margin: auto;
            padding: 1rem;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body class="bg-gray-100">

    <div class="container mx-auto p-4">
        <h1 class="text-4xl font-bold text-center my-8 text-gray-800">ระบบสั่งอาหารออนไลน์</h1>

        <!-- Tab Controls -->
        <div class="flex justify-center mb-6 space-x-4">
            <button id="tabAdmin" class="px-6 py-3 rounded-full text-lg font-semibold transition-colors duration-200 bg-white text-gray-700 shadow-md hover:bg-gray-200">สำหรับร้านค้า</button>
            <button id="tabCustomer" class="px-6 py-3 rounded-full text-lg font-semibold transition-colors duration-200 bg-white text-gray-700 shadow-md hover:bg-gray-200">สำหรับลูกค้า</button>
        </div>

        <!-- Admin Tab -->
        <div id="adminTabContent" class="tab-content bg-gray-50 p-6 rounded-xl shadow-lg border border-gray-200">
            <h2 class="text-3xl font-bold mb-6 text-gray-800 text-center">จัดการเมนูร้านค้า</h2>
            <form id="adminMenuForm" class="bg-white p-6 rounded-lg shadow-md mb-6 border border-gray-200">
                <input type="hidden" id="adminMenuItemId">
                <div class="mb-4">
                    <label for="adminMenuName" class="block text-gray-700 font-medium mb-2">ชื่อเมนู</label>
                    <input type="text" id="adminMenuName" placeholder="เช่น กะเพราไก่ไข่ดาว" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-all">
                </div>
                <div class="mb-4">
                    <label for="adminMenuPrice" class="block text-gray-700 font-medium mb-2">ราคา (บาท)</label>
                    <input type="number" id="adminMenuPrice" step="0.01" min="0" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-all">
                </div>
                <button type="submit" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-colors duration-200">บันทึกเมนู</button>
            </form>

            <h3 class="text-2xl font-bold mb-4 text-gray-800">รายการเมนูปัจจุบัน</h3>
            <ul id="adminMenuList" class="space-y-4">
                <!-- Menu items will be rendered here -->
            </ul>
        </div>

        <!-- Customer Tab -->
        <div id="customerTabContent" class="tab-content bg-gray-50 p-6 rounded-xl shadow-lg border border-gray-200">
            <h2 class="text-3xl font-bold mb-6 text-gray-800 text-center">รายการอาหาร</h2>
            <div id="customerMenuList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Menu items for customers will be rendered here -->
            </div>
            
            <div class="bg-white p-6 rounded-lg shadow-md mt-8 border border-gray-200">
                <h3 class="text-2xl font-bold mb-4 text-gray-800">รายการสั่งซื้อของคุณ</h3>
                <ul id="customerOrderList" class="space-y-2">
                    <!-- Customer's order items will be rendered here -->
                </ul>
                <div class="flex justify-between items-center border-t border-gray-300 mt-4 pt-4">
                    <span id="customerOrderTotal" class="text-xl font-bold text-gray-800">ราคารวม: 0.00 บาท</span>
                    <button id="checkoutBtn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-full shadow-md transition-colors duration-200">ยืนยันการสั่งซื้อ</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal for Order Confirmation -->
    <div id="orderModal" class="fixed inset-0 z-50 hidden flex items-center justify-center bg-black bg-opacity-50">
        <div class="bg-white p-8 rounded-xl shadow-2xl max-w-sm w-full relative">
            <button id="closeModal" class="absolute top-4 right-4 text-gray-500 hover:text-gray-800 text-3xl font-bold">&times;</button>
            <div id="orderModalContent">
                <!-- Order summary will be placed here -->
            </div>
        </div>
    </div>

    <!-- Message box -->
    <div id="messageBox" class="p-3 rounded-lg text-white font-bold text-center fixed bottom-4 right-4 z-50 transition-transform transform translate-y-20 opacity-0"></div>

    <script type="text/javascript">
        // Tab switching logic
        const tabAdmin = document.getElementById('tabAdmin');
        const tabCustomer = document.getElementById('tabCustomer');
        const adminTabContent = document.getElementById('adminTabContent');
        const customerTabContent = document.getElementById('customerTabContent');
        
        function switchTab(tabId) {
            if (tabId === 'admin') {
                tabAdmin.classList.add('bg-indigo-600', 'text-white');
                tabCustomer.classList.remove('bg-indigo-600', 'text-white');
                adminTabContent.classList.add('active');
                customerTabContent.classList.remove('active');
            } else {
                tabCustomer.classList.add('bg-indigo-600', 'text-white');
                tabAdmin.classList.remove('bg-indigo-600', 'text-white');
                customerTabContent.classList.add('active');
                adminTabContent.classList.remove('active');
            }
        }
        
        tabAdmin.addEventListener('click', () => switchTab('admin'));
        tabCustomer.addEventListener('click', () => switchTab('customer'));

        // Set initial tab to customer view
        switchTab('customer');

    </script>
</body>
</html>
